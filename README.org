This library provides utilities to interact with an [[https://openid.net/][OpenID]] identity
provider (idp) via [[https://clojure.org/][Clojure]].

Note: For now, this is specific for [[active.clojure.config/Configurationli][Keycloak]]-hosted OpenID idps.  In
the future, the intention is to make it work for generic OpenID idps.

* Description
  =active-openid= will try to discover Openid-endpoints at configured
  identity providedrs.  Multiple identity providers can be configured.
* Installation
  Include the following in your project's =deps.edn= file (or =leiningen=, =boot=, ... equivalent):

  #+begin_src clojure
    {:deps {...
	    de.active-group/active-openid {:git/tag "v0.1.0" :git/sha "<sha256>"}
	    ...}}
  #+end_src
* Configuration
** ... via =active.clojure.config=
   =active-openid= provides a configuration section for projects
   using =active.clojure.config= from [[https://github.com/active-group/active-clojure#configuration][=active-clojure=]].  Below is the
   configuration schema.
   
   | key              | desription                                                                  | range                      | comment                                                         |
   |------------------+-----------------------------------------------------------------------------+----------------------------+-----------------------------------------------------------------|
   | =:name=          | The name of the profile.                                                    | =string-range=             | Identifies the profile, also used to construct required routes. |
   | =:host=          | The host of this profile's openid instance.                                 | =string-range=             |                                                                 |
   | =:port=          | This port the openid service is listening on                                | =integer-between-range=    |                                                                 |
   | =:realm=         | The keycloak realm this project is a client on.                             | =string-range=             |                                                                 |
   | =:client=        | The client this project is identifying itself as to the openid provider.    | =string-range=             |                                                                 |
   | =:client-secret= | The secret this client knows from the openid provider.                      | =string-range=             |                                                                 |
   | =:scopes=        | Scopes this project wants to access from the openid provider.               | =sequence of string-range= |                                                                 |
   | =:launch-uri=    | Uri on your side that initiates the login process.                          | =string-range=             | Relative                                                        |
   | =:redirect-uri=  | Callback uri for authentication process on your side.                       | =string-range=             | Relative                                                        |
   | =:landing-uri=   | Default page the user-agent will be redirected to from the openid provider. | =string-range=             | Relative                                                        |
   | =:logout-uri=    | Uri on your side that initiates the logout process.                         | =string-range=             | Relative                                                        |

   A sequence schema is provided and expected to be under the
   =openid= key.  [[./example/etc/config.edn][An example configuration file can be found here]].

   #+begin_src clojure
   #+end_src
   Include this configuration as a =section= in you code like this

   #+begin_src clojure
     (ns your.ns
       (:require [active.clojure.config :as active-config]
		 [active.clojure.openid.config :as openid-config]))

     (def schema
       (active-config/schema "Configuration schema for my.ns"
			     ...  ; the rest of your config
			     openid-config/section))
   #+end_src

   A =schema= is also provided in =active.clojure.openid.config/keyclaok-sequence-schema=.
* Usage
  See [[./example]].
* Development
  For your convenience, this project includes a minimal [[./shell.nix][shell.nix]] file.  Just run
  #+begin_src
    nix-shell --pure
  #+end_src
  and you should be good to go.
* Running tests
  =active-openid= provides a =Makefile= with a =test= target.  To run
  the tests:

  #+begin_src
    make test
  #+end_src
* Deploy a new release
  =active-openid= provides a =Makefile= with a =deploy= target.  To
  release a new version to [[https://clojars.org/][Clojars]], the =deploy= target relies on two
  environment variables
  
  - =CLOJARS_USERNAME=:  Your clojars username.
  - =CLOJARS_PASSWORD=:  Your clojars cli token.

  To publish a new release, run:
  #+begin_src 
    CLOJARS_USERNAME=<username> CLOJARS_PASSWORD=<cli-token> make deploy
  #+end_src
* TODO [1/3]
  Some of the todos for this project.
  - [X] Browser based authentication
  - [ ] [[https://openid.net/specs/openid-connect-backchannel-1_0.html][Backchannel logout]]
  - [ ] =check_session_iframe=.  Included in in discovered endpoints
    and therefore usable.  In the future, some direct support (maybe a
    [[https://github.com/active-group/reacl-c][reacl-c]]-item would be nice?).

    
